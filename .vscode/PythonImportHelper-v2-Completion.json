[
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "typing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "typing",
        "description": "typing",
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "engine_from_config",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "pool",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.base.db",
        "description": "src.base.db",
        "isExtraImport": true,
        "detail": "src.base.db",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.base.db",
        "description": "src.base.db",
        "isExtraImport": true,
        "detail": "src.base.db",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.base.db",
        "description": "src.base.db",
        "isExtraImport": true,
        "detail": "src.base.db",
        "documentation": {}
    },
    {
        "label": "engine",
        "importPath": "src.base.db",
        "description": "src.base.db",
        "isExtraImport": true,
        "detail": "src.base.db",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "importPath": "src.base.db",
        "description": "src.base.db",
        "isExtraImport": true,
        "detail": "src.base.db",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "src.base.config",
        "description": "src.base.config",
        "isExtraImport": true,
        "detail": "src.base.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "src.base.config",
        "description": "src.base.config",
        "isExtraImport": true,
        "detail": "src.base.config",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "src.models",
        "description": "src.models",
        "isExtraImport": true,
        "detail": "src.models",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "DeclarativeBase",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "main.src.base.db",
        "description": "main.src.base.db",
        "isExtraImport": true,
        "detail": "main.src.base.db",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "main.src.base.db",
        "description": "main.src.base.db",
        "isExtraImport": true,
        "detail": "main.src.base.db",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "main.src.base.db",
        "description": "main.src.base.db",
        "isExtraImport": true,
        "detail": "main.src.base.db",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "main.src.base.db",
        "description": "main.src.base.db",
        "isExtraImport": true,
        "detail": "main.src.base.db",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Question",
        "importPath": "main.src.models.question",
        "description": "main.src.models.question",
        "isExtraImport": true,
        "detail": "main.src.models.question",
        "documentation": {}
    },
    {
        "label": "Question",
        "importPath": "main.src.models.question",
        "description": "main.src.models.question",
        "isExtraImport": true,
        "detail": "main.src.models.question",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordRequestForm",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordBearer",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "UserNotFound",
        "importPath": "main.src.exceptions",
        "description": "main.src.exceptions",
        "isExtraImport": true,
        "detail": "main.src.exceptions",
        "documentation": {}
    },
    {
        "label": "CredentialsException",
        "importPath": "main.src.exceptions",
        "description": "main.src.exceptions",
        "isExtraImport": true,
        "detail": "main.src.exceptions",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "main.src.models.user",
        "description": "main.src.models.user",
        "isExtraImport": true,
        "detail": "main.src.models.user",
        "documentation": {}
    },
    {
        "label": "UserCreateResponse",
        "importPath": "main.src.schemas.user",
        "description": "main.src.schemas.user",
        "isExtraImport": true,
        "detail": "main.src.schemas.user",
        "documentation": {}
    },
    {
        "label": "UserCreateRequest",
        "importPath": "main.src.schemas.user",
        "description": "main.src.schemas.user",
        "isExtraImport": true,
        "detail": "main.src.schemas.user",
        "documentation": {}
    },
    {
        "label": "verify_password",
        "importPath": "main.src.utils",
        "description": "main.src.utils",
        "isExtraImport": true,
        "detail": "main.src.utils",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "main.src.utils",
        "description": "main.src.utils",
        "isExtraImport": true,
        "detail": "main.src.utils",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "field_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "bcrypt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "bcrypt",
        "description": "bcrypt",
        "detail": "bcrypt",
        "documentation": {}
    },
    {
        "label": "wraps",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "base.db",
        "description": "base.db",
        "isExtraImport": true,
        "detail": "base.db",
        "documentation": {}
    },
    {
        "label": "CredentialsException",
        "importPath": "exceptions",
        "description": "exceptions",
        "isExtraImport": true,
        "detail": "exceptions",
        "documentation": {}
    },
    {
        "label": "InvalidRoleException",
        "importPath": "exceptions",
        "description": "exceptions",
        "isExtraImport": true,
        "detail": "exceptions",
        "documentation": {}
    },
    {
        "label": "UserNotFound",
        "importPath": "exceptions",
        "description": "exceptions",
        "isExtraImport": true,
        "detail": "exceptions",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models.user",
        "description": "models.user",
        "isExtraImport": true,
        "detail": "models.user",
        "documentation": {}
    },
    {
        "label": "verify_token",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "jwt",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "JWTError",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "base.config",
        "description": "base.config",
        "isExtraImport": true,
        "detail": "base.config",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "src.api",
        "description": "src.api",
        "isExtraImport": true,
        "detail": "src.api",
        "documentation": {}
    },
    {
        "label": "uvicorn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uvicorn",
        "description": "uvicorn",
        "detail": "uvicorn",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.12/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.12/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.12/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.12/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.12/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"../lib/python3.12/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "main.alembic.versions.7e0ff8002ba4_changed_tasks_table",
        "description": "main.alembic.versions.7e0ff8002ba4_changed_tasks_table",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table('answers')\n    op.add_column('questions', sa.Column('A', sa.String(), nullable=False))\n    op.add_column('questions', sa.Column('B', sa.String(), nullable=False))\n    op.add_column('questions', sa.Column('C', sa.String(), nullable=False))\n    op.add_column('questions', sa.Column('D', sa.String(), nullable=False))\n    # ### end Alembic commands ###\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###",
        "detail": "main.alembic.versions.7e0ff8002ba4_changed_tasks_table",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "main.alembic.versions.7e0ff8002ba4_changed_tasks_table",
        "description": "main.alembic.versions.7e0ff8002ba4_changed_tasks_table",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_column('questions', 'D')\n    op.drop_column('questions', 'C')\n    op.drop_column('questions', 'B')\n    op.drop_column('questions', 'A')\n    op.create_table('answers',\n    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),\n    sa.Column('text', sa.VARCHAR(), autoincrement=False, nullable=False),\n    sa.Column('is_correct', sa.INTEGER(), autoincrement=False, nullable=False),",
        "detail": "main.alembic.versions.7e0ff8002ba4_changed_tasks_table",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "main.alembic.versions.b52096460987_initial_migration",
        "description": "main.alembic.versions.b52096460987_initial_migration",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('questions',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('text', sa.Text(), nullable=False),\n    sa.Column('imgae', sa.String(), nullable=True),\n    sa.PrimaryKeyConstraint('id')\n    )\n    op.create_table('answers',\n    sa.Column('id', sa.Integer(), nullable=False),",
        "detail": "main.alembic.versions.b52096460987_initial_migration",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "main.alembic.versions.b52096460987_initial_migration",
        "description": "main.alembic.versions.b52096460987_initial_migration",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table('answers')\n    op.drop_table('questions')\n    # ### end Alembic commands ###",
        "detail": "main.alembic.versions.b52096460987_initial_migration",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "main.alembic.env",
        "description": "main.alembic.env",
        "peekOfCode": "def run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")",
        "detail": "main.alembic.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "main.alembic.env",
        "description": "main.alembic.env",
        "peekOfCode": "def run_migrations_online() -> None:\n    \"\"\"Run migrations in 'online' mode.\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    connectable = engine_from_config(\n        config.get_section(config.config_ini_section, {}),\n        prefix=\"sqlalchemy.\",\n        poolclass=pool.NullPool,\n    )",
        "detail": "main.alembic.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "main.alembic.env",
        "description": "main.alembic.env",
        "peekOfCode": "config = context.config\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)\nconfig.set_main_option(\"sqlalchemy.url\" , settings.connection_string)\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata",
        "detail": "main.alembic.env",
        "documentation": {}
    },
    {
        "label": "target_metadata",
        "kind": 5,
        "importPath": "main.alembic.env",
        "description": "main.alembic.env",
        "peekOfCode": "target_metadata = Base.metadata\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\ndef run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation",
        "detail": "main.alembic.env",
        "documentation": {}
    },
    {
        "label": "upload_image",
        "kind": 2,
        "importPath": "main.src.api.question_bank.image_add",
        "description": "main.src.api.question_bank.image_add",
        "peekOfCode": "def upload_image(\n    id : int,\n    file: UploadFile = File(...), \n    db : Session = Depends(get_db)):\n    if not file.content_type.startswith(\"image/\"):\n        raise HTTPException(\n            status_code=400, \n            detail=\"File is not an image.\"\n        )\n    question = db.query(Question).filter(Question.id == id).first()",
        "detail": "main.src.api.question_bank.image_add",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "main.src.api.question_bank.image_add",
        "description": "main.src.api.question_bank.image_add",
        "peekOfCode": "router = APIRouter()\nUPLOAD_DIR = Path(\"uploaded_images\")\nUPLOAD_DIR.mkdir(exist_ok=True) \n@router.put(\"/upload/image/{id}\")\ndef upload_image(\n    id : int,\n    file: UploadFile = File(...), \n    db : Session = Depends(get_db)):\n    if not file.content_type.startswith(\"image/\"):\n        raise HTTPException(",
        "detail": "main.src.api.question_bank.image_add",
        "documentation": {}
    },
    {
        "label": "UPLOAD_DIR",
        "kind": 5,
        "importPath": "main.src.api.question_bank.image_add",
        "description": "main.src.api.question_bank.image_add",
        "peekOfCode": "UPLOAD_DIR = Path(\"uploaded_images\")\nUPLOAD_DIR.mkdir(exist_ok=True) \n@router.put(\"/upload/image/{id}\")\ndef upload_image(\n    id : int,\n    file: UploadFile = File(...), \n    db : Session = Depends(get_db)):\n    if not file.content_type.startswith(\"image/\"):\n        raise HTTPException(\n            status_code=400, ",
        "detail": "main.src.api.question_bank.image_add",
        "documentation": {}
    },
    {
        "label": "upload_excel",
        "kind": 2,
        "importPath": "main.src.api.question_bank.upload",
        "description": "main.src.api.question_bank.upload",
        "peekOfCode": "def upload_excel(file: UploadFile, db: Session = Depends(get_db)):\n    try:\n        # Read the Excel file into a pandas DataFrame\n        df = pd.read_excel(file.file)\n        df.columns = df.columns.str.strip()  # Normalize column names (remove extra spaces)\n        # Ensure the required columns are present\n        required_columns = {\"Question\", \"A\", \"B\", \"C\", \"D\"}\n        if not required_columns.issubset(df.columns):\n            raise HTTPException(\n                status_code=400,",
        "detail": "main.src.api.question_bank.upload",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "main.src.api.question_bank.upload",
        "description": "main.src.api.question_bank.upload",
        "peekOfCode": "router = APIRouter()\n@router.post(\"/upload\")\ndef upload_excel(file: UploadFile, db: Session = Depends(get_db)):\n    try:\n        # Read the Excel file into a pandas DataFrame\n        df = pd.read_excel(file.file)\n        df.columns = df.columns.str.strip()  # Normalize column names (remove extra spaces)\n        # Ensure the required columns are present\n        required_columns = {\"Question\", \"A\", \"B\", \"C\", \"D\"}\n        if not required_columns.issubset(df.columns):",
        "detail": "main.src.api.question_bank.upload",
        "documentation": {}
    },
    {
        "label": "register_user",
        "kind": 2,
        "importPath": "main.src.api.user_authen.user",
        "description": "main.src.api.user_authen.user",
        "peekOfCode": "def register_user(user_create_data: UserCreateRequest, db: Session = Depends(get_db)):\n    new_user = User(**user_create_data.model_dump())\n    db.add(new_user)\n    db.commit()\n    db.refresh(new_user)\n    return new_user\n@users_router.post(\"/login\")\ndef login_user(login_form: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(get_db)):\n    result = db.execute(select(User).where(login_form.username == User.username))\n    user = result.scalar_one_or_none()",
        "detail": "main.src.api.user_authen.user",
        "documentation": {}
    },
    {
        "label": "login_user",
        "kind": 2,
        "importPath": "main.src.api.user_authen.user",
        "description": "main.src.api.user_authen.user",
        "peekOfCode": "def login_user(login_form: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(get_db)):\n    result = db.execute(select(User).where(login_form.username == User.username))\n    user = result.scalar_one_or_none()\n    if not user:\n        raise UserNotFound\n    if not verify_password(login_form.password, user.password):\n        raise CredentialsException\n    access_token = create_access_token(data=dict(username=user.username), exp=datetime.utcnow() + timedelta(minutes=15))\n    return {'access_token':access_token}",
        "detail": "main.src.api.user_authen.user",
        "documentation": {}
    },
    {
        "label": "users_router",
        "kind": 5,
        "importPath": "main.src.api.user_authen.user",
        "description": "main.src.api.user_authen.user",
        "peekOfCode": "users_router = APIRouter(prefix='/users', tags=[\"Users\"])\n@users_router.post('/register', response_model=UserCreateResponse)\ndef register_user(user_create_data: UserCreateRequest, db: Session = Depends(get_db)):\n    new_user = User(**user_create_data.model_dump())\n    db.add(new_user)\n    db.commit()\n    db.refresh(new_user)\n    return new_user\n@users_router.post(\"/login\")\ndef login_user(login_form: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(get_db)):",
        "detail": "main.src.api.user_authen.user",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "main.src.base.config",
        "description": "main.src.base.config",
        "peekOfCode": "class Settings(BaseSettings):\n    DB_USER: str \n    DB_HOST: str \n    DB_PASSWORD: str \n    DB_PORT: str \n    DB_NAME: str \n    # MODE: str\n    # SECRET_KEY: str\n    # ACCESS_TOKEN_EXPIRE_MINUTES: int\n    # ALGORITHM: str",
        "detail": "main.src.base.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "main.src.base.config",
        "description": "main.src.base.config",
        "peekOfCode": "settings = Settings()",
        "detail": "main.src.base.config",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 6,
        "importPath": "main.src.base.db",
        "description": "main.src.base.db",
        "peekOfCode": "class Base(DeclarativeBase):\n    pass",
        "detail": "main.src.base.db",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "main.src.base.db",
        "description": "main.src.base.db",
        "peekOfCode": "def get_db():\n    session = SessionLocal()\n    try:\n        yield session\n    finally:\n        session.close()\nclass Base(DeclarativeBase):\n    pass",
        "detail": "main.src.base.db",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "main.src.base.db",
        "description": "main.src.base.db",
        "peekOfCode": "engine = create_engine(settings.connection_string, echo=True)\nSessionLocal = sessionmaker(\n    bind=engine,\n    expire_on_commit=False,\n)\ndef get_db():\n    session = SessionLocal()\n    try:\n        yield session\n    finally:",
        "detail": "main.src.base.db",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "main.src.base.db",
        "description": "main.src.base.db",
        "peekOfCode": "SessionLocal = sessionmaker(\n    bind=engine,\n    expire_on_commit=False,\n)\ndef get_db():\n    session = SessionLocal()\n    try:\n        yield session\n    finally:\n        session.close()",
        "detail": "main.src.base.db",
        "documentation": {}
    },
    {
        "label": "Question",
        "kind": 6,
        "importPath": "main.src.models.question",
        "description": "main.src.models.question",
        "peekOfCode": "class Question(Base):\n    __tablename__ = \"questions\"\n    id = Column(Integer , primary_key=True , nullable=False)\n    text = Column(Text , nullable=False)\n    imgae = Column(String , nullable=True)\n    A = Column(String , nullable=False)\n    B = Column(String , nullable=False)\n    C = Column(String , nullable=False)\n    D = Column(String , nullable=False)",
        "detail": "main.src.models.question",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "main.src.models.user",
        "description": "main.src.models.user",
        "peekOfCode": "class User(Base):\n    __tablename__ = \"users\"\n    id = Column(Integer, primary_key=True)\n    username = Column(String, nullable=False)\n    password = Column(String, nullable=False)\n    role = Column(String, nullable=False)",
        "detail": "main.src.models.user",
        "documentation": {}
    },
    {
        "label": "UserData",
        "kind": 6,
        "importPath": "main.src.schemas.user",
        "description": "main.src.schemas.user",
        "peekOfCode": "class UserData(BaseModel):\n    username: str\n    password: str\n    role: str\n    @field_validator(\"password\")\n    def hash_password(cls, value):\n        salt = bcrypt.gensalt()\n        hashed_password = bcrypt.hashpw(value.encode('utf-8'), salt)\n        return hashed_password.decode('utf-8')\nclass UserCreateRequest(UserData):",
        "detail": "main.src.schemas.user",
        "documentation": {}
    },
    {
        "label": "UserCreateRequest",
        "kind": 6,
        "importPath": "main.src.schemas.user",
        "description": "main.src.schemas.user",
        "peekOfCode": "class UserCreateRequest(UserData):\n    class Config:\n        form_attributes = True\nclass UserCreateResponse(UserData):\n    id: int\n    class Config:\n        from_attributes = True",
        "detail": "main.src.schemas.user",
        "documentation": {}
    },
    {
        "label": "UserCreateResponse",
        "kind": 6,
        "importPath": "main.src.schemas.user",
        "description": "main.src.schemas.user",
        "peekOfCode": "class UserCreateResponse(UserData):\n    id: int\n    class Config:\n        from_attributes = True",
        "detail": "main.src.schemas.user",
        "documentation": {}
    },
    {
        "label": "UserNotFound",
        "kind": 6,
        "importPath": "main.src.exceptions",
        "description": "main.src.exceptions",
        "peekOfCode": "class UserNotFound(HTTPException):\n    def __init__(self):\n        super().__init__(\n            status_code = status.HTTP_401_UNAUTHORIZED,\n            detail=\"User Not Found\",\n            headers={\"WWW-Authenticate\": \"Bearer\"}\n        )\nclass CredentialsException(HTTPException):\n    def __init__(self):\n        super().__init__(",
        "detail": "main.src.exceptions",
        "documentation": {}
    },
    {
        "label": "CredentialsException",
        "kind": 6,
        "importPath": "main.src.exceptions",
        "description": "main.src.exceptions",
        "peekOfCode": "class CredentialsException(HTTPException):\n    def __init__(self):\n        super().__init__(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Could not validate credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"}\n        )\nclass InvalidRoleException(HTTPException):\n    def __init__(self):\n        super().__init__(",
        "detail": "main.src.exceptions",
        "documentation": {}
    },
    {
        "label": "InvalidRoleException",
        "kind": 6,
        "importPath": "main.src.exceptions",
        "description": "main.src.exceptions",
        "peekOfCode": "class InvalidRoleException(HTTPException):\n    def __init__(self):\n        super().__init__(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid Role\",\n            headers={\"WWW-Authenticate\": \"Bearer\"}\n        )",
        "detail": "main.src.exceptions",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "kind": 2,
        "importPath": "main.src.security",
        "description": "main.src.security",
        "peekOfCode": "def get_current_user(token: str = Depends(security_schema), db: Session = Depends(get_db)):\n    payload = verify_token(token)\n    username: str = payload.get(\"username\")\n    if username is None:\n        raise CredentialsException\n    result = db.execute(select(User).filter(User.username == username))\n    user = result.scalars().first()\n    if user is None:\n        raise CredentialsException\n    return user",
        "detail": "main.src.security",
        "documentation": {}
    },
    {
        "label": "has_access",
        "kind": 2,
        "importPath": "main.src.security",
        "description": "main.src.security",
        "peekOfCode": "def has_access(roles: typing.List[str]):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            user = kwargs.get('current_user')\n            if user.role not in roles:\n                raise InvalidRoleException\n            result = func(*args, **kwargs)\n            return result\n        return wrapper",
        "detail": "main.src.security",
        "documentation": {}
    },
    {
        "label": "get_admin_user",
        "kind": 2,
        "importPath": "main.src.security",
        "description": "main.src.security",
        "peekOfCode": "def get_admin_user(user: User = Depends(get_current_user)):\n    if user.username != 'admin':\n        raise CredentialsException\n    return user",
        "detail": "main.src.security",
        "documentation": {}
    },
    {
        "label": "security_schema",
        "kind": 5,
        "importPath": "main.src.security",
        "description": "main.src.security",
        "peekOfCode": "security_schema = OAuth2PasswordBearer(tokenUrl='/user/login')\ndef get_current_user(token: str = Depends(security_schema), db: Session = Depends(get_db)):\n    payload = verify_token(token)\n    username: str = payload.get(\"username\")\n    if username is None:\n        raise CredentialsException\n    result = db.execute(select(User).filter(User.username == username))\n    user = result.scalars().first()\n    if user is None:\n        raise CredentialsException",
        "detail": "main.src.security",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "kind": 2,
        "importPath": "main.src.utils",
        "description": "main.src.utils",
        "peekOfCode": "def create_access_token(data: typing.Dict):\n    return jwt.encode(data, settings.SECRET_KEY, algorithm=settings.ALGORITHM)\ndef verify_token(token: str):\n    try:\n        payload = jwt.decode(\n            token, settings.SECRET_KEY, algorithms=[settings.ALGORITHM]\n        )\n        return payload\n    except JWTError:\n        raise UserNotFound",
        "detail": "main.src.utils",
        "documentation": {}
    },
    {
        "label": "verify_token",
        "kind": 2,
        "importPath": "main.src.utils",
        "description": "main.src.utils",
        "peekOfCode": "def verify_token(token: str):\n    try:\n        payload = jwt.decode(\n            token, settings.SECRET_KEY, algorithms=[settings.ALGORITHM]\n        )\n        return payload\n    except JWTError:\n        raise UserNotFound\ndef verify_password(plain_password: str, hashed_password: str) -> bool:\n    return bcrypt.checkpw(plain_password.encode('utf-8'),",
        "detail": "main.src.utils",
        "documentation": {}
    },
    {
        "label": "verify_password",
        "kind": 2,
        "importPath": "main.src.utils",
        "description": "main.src.utils",
        "peekOfCode": "def verify_password(plain_password: str, hashed_password: str) -> bool:\n    return bcrypt.checkpw(plain_password.encode('utf-8'),\n                          hashed_password.encode('utf-8')\n                          )",
        "detail": "main.src.utils",
        "documentation": {}
    },
    {
        "label": "setup_db",
        "kind": 2,
        "importPath": "main.test.conftest",
        "description": "main.test.conftest",
        "peekOfCode": "def setup_db():\n    assert settings.MODE == \"TEST\"\n    Base.metadata.drop_all(engine)\n    Base.metadata.create_all(engine)\n@pytest.fixture()\ndef db():\n    session = SessionLocal()\n    try:\n        yield session\n    finally:",
        "detail": "main.test.conftest",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 2,
        "importPath": "main.test.conftest",
        "description": "main.test.conftest",
        "peekOfCode": "def db():\n    session = SessionLocal()\n    try:\n        yield session\n    finally:\n        session.close()",
        "detail": "main.test.conftest",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main.main",
        "description": "main.main",
        "peekOfCode": "app = FastAPI()\napp.include_router(main_api)\nif __name__ == \"__main__\":\n    uvicorn.run(\"main:app\", reload=True, host=\"0.0.0.0\")",
        "detail": "main.main",
        "documentation": {}
    }
]